<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Using Delve to debug Go programs on Red Hat Enterprise Linux</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/vTgb9gfaEL0/" /><link rel="enclosure" type="video/webm" href="https://video.fosdem.org/2020/UB2.252A/debuggingwithdelve.webm" /><category term="Go" /><category term="Linux" /><category term="Performance" /><category term="debug" /><category term="delve" /><category term="Golang" /><category term="RHEL" /><category term="starlark" /><author><name>Derek Parker</name></author><id>https://developers.redhat.com/blog/?p=695267</id><updated>2021-03-03T08:00:40Z</updated><published>2021-03-03T08:00:40Z</published><content type="html">&lt;p&gt;Delve is now available on &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL). Starting in the RHEL 8.2 and &lt;code&gt;devtools-2020.2&lt;/code&gt; releases, the &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go language&lt;/a&gt; debugger &lt;a target="_blank" rel="nofollow" href="https://github.com/go-delve/delve"&gt;Delve&lt;/a&gt; will be installed with the Go toolchain itself via the &lt;code&gt;go-toolset&lt;/code&gt; package.&lt;/p&gt; &lt;p&gt;Being tailored specifically for Go, Delve has intricate knowledge of the Go runtime and provides features and an environment not available in other debuggers. The tool aims for simplicity of use, staying out of your way as you figure out what&amp;#8217;s going wrong with your program. Delve also offers powerful features that let you debug your Go programs as quickly as possible.&lt;/p&gt; &lt;h2&gt;Installation&lt;/h2&gt; &lt;p&gt;Installation requires only one command to install both Go and Delve:&lt;/p&gt; &lt;pre&gt;sudo dnf install -y go-toolset&lt;/pre&gt; &lt;p&gt;If the command is successful, both the Go toolchain and the Delve debugger will be installed and ready to use.&lt;/p&gt; &lt;h2&gt;Advantages of Delve&lt;/h2&gt; &lt;p&gt;As I mentioned earlier, the goal of this tool is to stay out of your way as much as possible. This means removing many manual steps to provide a straightforward debugging experience.&lt;/p&gt; &lt;p&gt;As an example, the Go compiler tries to choose sensible defaults wherever feasible, so it turns on optimizations by default. The optimizations are great for running your Go programs in production but they can make debugging more difficult. Delve solves this issue by turning off optimizations automatically when building your binary. Delve can also work alongside other tools such as &lt;a target="_blank" rel="nofollow" href="https://github.com/rr-debugger/rr"&gt;Mozilla RR&lt;/a&gt;, which is currently not available as a package on RHEL, but can be built from source or installed from upstream releases.&lt;/p&gt; &lt;h2&gt;Using Delve&lt;/h2&gt; &lt;p&gt;Delve aims to be as simple to use as the Go command itself. The basic use case to start debugging a package is:&lt;/p&gt; &lt;pre&gt;dlv debug&lt;/pre&gt; &lt;p&gt;Issuing this command causes Delve to compile your program with optimizations disabled automatically, and land you at a command prompt ready to start debugging.&lt;/p&gt; &lt;p&gt;The other most common ways to begin debugging your Go program with Delve are to attach to a running process or to execute a pre-built binary:&lt;/p&gt; &lt;pre&gt;dlv attach $pid dlv exec ./path/to/binary&lt;/pre&gt; &lt;p&gt;The only potential downside to these options turns up if the binary was built with optimizations. In this case, some information might be unavailable to the debugger. So, if you want to invoke Delve on a precompiled binary, we recommend building it with optimizations disabled, using the following flags:&lt;/p&gt; &lt;pre&gt;-go build -gcflags="-N -l"&lt;/pre&gt; &lt;h2&gt;Delve tips and tricks&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s go over a few additional tips and tricks to help you make the most of Delve.&lt;/p&gt; &lt;h3&gt;Delve can call functions in the debugged process&lt;/h3&gt; &lt;p&gt;For instance, to jump to a function named &lt;code&gt;(dlv) call main.callme&lt;/code&gt; within Delve, enter:&lt;/p&gt; &lt;pre&gt;(dlv) call .&lt;/pre&gt; &lt;h3&gt;Delve can act like strace&lt;/h3&gt; &lt;p&gt;Instead of starting a debugging session, you can connect to and trace a running binary. For example, you might trace a function named &lt;code&gt;callme&lt;/code&gt; as follows:&lt;/p&gt; &lt;pre&gt;dlv trace callme &amp;#62; goroutine(1): main.callme(12) =&amp;#62; (16) &lt;/pre&gt; &lt;p&gt;The output from Delve displays both the argument and the return value when the function is called—all without ever starting an interactive debug session!&lt;/p&gt; &lt;h3&gt;Delve allows different backends&lt;/h3&gt; &lt;p&gt;For instance, you can switch to the Mozilla RR backend for record-and-replay debugging as follows:&lt;/p&gt; &lt;pre&gt;dlv debug --backend=rr&lt;/pre&gt; &lt;p&gt;To learn more about this technique, please watch my talk, &lt;a target="_blank" rel="nofollow" href="https://video.fosdem.org/2020/UB2.252A/debuggingwithdelve.webm"&gt;Deterministic debugging with Delve&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Delve lets you script the debugger and add your own commands&lt;/h3&gt; &lt;p&gt;To provide an API for users to automate Delve or add new commands, Delve uses the scripting language &lt;a target="_blank" rel="nofollow" href="https://docs.bazel.build/versions/master/skylark/language.html"&gt;Starlark&lt;/a&gt;, which is similar to Python and was developed by the project that creates the &lt;a target="_blank" rel="nofollow" href="https://docs.bazel.build/versions/master/bazel-overview.html"&gt;Bazel build tool&lt;/a&gt;. See &lt;a href="https://github.com/go-delve/delve/blob/master/Documentation/cli/starlark.md" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Delve&amp;#8217;s API documentation&lt;/a&gt; for more about this tool and how to use it.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Now that Delve is available in the &lt;code&gt;go-toolset&lt;/code&gt; package on RHEL, debugging Go programs has never been easier. Try it out and give your feedback in the &lt;a target="_blank" rel="nofollow" href="https://github.com/go-delve/delve/"&gt;upstream repo&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F03%2Fusing-delve-to-debug-go-programs-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Using%20Delve%20to%20debug%20Go%20programs%20on%20Red%20Hat%20Enterprise%20Linux" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F03%2Fusing-delve-to-debug-go-programs-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Using%20Delve%20to%20debug%20Go%20programs%20on%20Red%20Hat%20Enterprise%20Linux" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F03%2Fusing-delve-to-debug-go-programs-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Using%20Delve%20to%20debug%20Go%20programs%20on%20Red%20Hat%20Enterprise%20Linux" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F03%2Fusing-delve-to-debug-go-programs-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Using%20Delve%20to%20debug%20Go%20programs%20on%20Red%20Hat%20Enterprise%20Linux" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F03%2Fusing-delve-to-debug-go-programs-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Using%20Delve%20to%20debug%20Go%20programs%20on%20Red%20Hat%20Enterprise%20Linux" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F03%2Fusing-delve-to-debug-go-programs-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Using%20Delve%20to%20debug%20Go%20programs%20on%20Red%20Hat%20Enterprise%20Linux" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F03%2Fusing-delve-to-debug-go-programs-on-red-hat-enterprise-linux%2F&amp;#38;linkname=Using%20Delve%20to%20debug%20Go%20programs%20on%20Red%20Hat%20Enterprise%20Linux" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F03%2Fusing-delve-to-debug-go-programs-on-red-hat-enterprise-linux%2F&amp;#038;title=Using%20Delve%20to%20debug%20Go%20programs%20on%20Red%20Hat%20Enterprise%20Linux" data-a2a-url="https://developers.redhat.com/blog/2021/03/03/using-delve-to-debug-go-programs-on-red-hat-enterprise-linux/" data-a2a-title="Using Delve to debug Go programs on Red Hat Enterprise Linux"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/03/03/using-delve-to-debug-go-programs-on-red-hat-enterprise-linux/"&gt;Using Delve to debug Go programs on Red Hat Enterprise Linux&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/vTgb9gfaEL0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Delve is now available on Red Hat Enterprise Linux (RHEL). Starting in the RHEL 8.2 and devtools-2020.2 releases, the Go language debugger Delve will be installed with the Go toolchain itself via the go-toolset package. Being tailored specifically for Go, Delve has intricate knowledge of the Go runtime and provides features and an environment not available [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/03/03/using-delve-to-debug-go-programs-on-red-hat-enterprise-linux/"&gt;Using Delve to debug Go programs on Red Hat Enterprise Linux&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">695267</post-id><dc:creator>Derek Parker</dc:creator><dc:date>2021-03-03T08:00:40Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/03/03/using-delve-to-debug-go-programs-on-red-hat-enterprise-linux/</feedburner:origLink></entry><entry><title type="html">Modeling and development of decision services: DMN with Kogito</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MtYk31fiENU/modeling-and-development-of-decision-services-dmn-with-kogito.html" /><author><name>Matteo Mortari</name></author><id>https://blog.kie.org/2021/03/modeling-and-development-of-decision-services-dmn-with-kogito.html</id><updated>2021-03-02T17:32:24Z</updated><content type="html">I’ve recorded the following "developer notes" as a support medium to demonstrate the progress and the current integration of several Kogito features. As I believe this could be of interest to a wider audience to have a brief overview of the many capabilities of the Kogito platform for modeling and developing decision services with DMN, I am sharing them in this post. Let us know if you find these useful and if you’d like to see more of this kind of video recordings! DMN WITH KOGITO ON QUARKUS DMN with Kogito on Quarkus * Bootstrap a new project with Kogito Maven archetype * Author DMN model in VS Code DMN modeler tooling * Generate Swagger / OAS descriptors (development support) * Test DMN REST endpoints using JUnit ( + RestAssured ) * Test DMN model using VS Code Test scenarios tooling * Inject listener use case * Test DMN on Quarkus service using Quarkus dev-mode locally * Generated REST API for DMN models with Swagger/OAS descriptors and internals * GraalVM Native Image / Mandrel native support DMN WITH KOGITO ON SPRING BOOT DMN with Kogito on Spring Boot * Bootstrap a new project with Kogito Maven archetype * Author DMN model in VS Code DMN modeler tooling * Generated Swagger / OAS descriptors (development support) and Test DMN SpringBoot service locally * Test DMN REST endpoints using JUnit ( + RestAssured ) * Test DMN model using VS Code Test scenarios tooling The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MtYk31fiENU" height="1" width="1" alt=""/&gt;</content><dc:creator>Matteo Mortari</dc:creator><feedburner:origLink>https://blog.kie.org/2021/03/modeling-and-development-of-decision-services-dmn-with-kogito.html</feedburner:origLink></entry><entry><title>Packaging APIs for consumers with Red Hat 3scale API Management</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Y16ej0rYAEA/" /><category term="DevOps" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="3scale API Management" /><category term="API consumers" /><category term="API plans" /><category term="API policies" /><author><name>Satya Jayanti</name></author><id>https://developers.redhat.com/blog/?p=869597</id><updated>2021-03-02T08:00:12Z</updated><published>2021-03-02T08:00:12Z</published><content type="html">&lt;p&gt;One of an API management platform&amp;#8217;s core functionalities is defining and enforcing policies, business domain rate limits, and pricing rules for securing API endpoints. As an API provider, you sometimes need to make the same backend API available for different consumer segments using these terms. In this article, you will learn about using &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;Red Hat 3scale API Management&lt;/a&gt; to package APIs for different consumers, including internal and external developers and strategic partners. See the end of the article for a video tutorial that guides you through using 3scale API Management to create and configure the packages that you will learn about in this article.&lt;/p&gt; &lt;h2&gt;About Red Hat 3scale API Management&lt;/h2&gt; &lt;p&gt;3scale API Management is a scalable, hybrid cloud API management framework that is part of the &lt;a href="https://developers.redhat.com/integration"&gt;Red Hat Integration&lt;/a&gt; product portfolio. Figure 1 is a simplified view of the &lt;a target="_blank" rel="nofollow" href="https://www.3scale.net"&gt;3scale API Management&lt;/a&gt; framework.&lt;/p&gt; &lt;div id="attachment_742967" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram.png"&gt;&lt;img aria-describedby="caption-attachment-742967" class="hoverZoomLink wp-image-742967 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-1024x698.png" alt="The flow of interactions between the API consumer, API manager, and API gateway in 3scale API Management." width="640" height="436" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-1024x698.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-300x205.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-768x524.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram.png 1154w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742967" class="wp-caption-text"&gt;Figure 1: A high-level view of 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The &lt;em&gt;API Manager&lt;/em&gt; is the framework&amp;#8217;s control plane. It provides an interface for the API provider to create users, accounts, policies, and services. The &lt;em&gt;API Gateway&lt;/em&gt; (APIcast) enforces the policies for APIs in the data plane.&lt;/p&gt; &lt;h2&gt;Policies for  API access&lt;/h2&gt; &lt;p&gt;We can use 3scale API Management to create consumer segments where distinct policies are enforced for the same API. For example, let&amp;#8217;s say we need to expose a single API endpoint to three different consumer audiences: internal developers, external developers, and strategic partners. Table 1 shows a sample scenario of the packages that we could create for each audience.&lt;/p&gt; &lt;table align="”center”"&gt; &lt;caption&gt;&lt;strong&gt;Table 1: A basic application plan for three audiences&lt;/strong&gt;&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Package&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Rate limits&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Pricing rules&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Internal developers&lt;/td&gt; &lt;td&gt;None&lt;/td&gt; &lt;td&gt;Free&lt;/td&gt; &lt;td&gt;Internal&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;External developers&lt;/td&gt; &lt;td&gt;10 calls per minute&lt;/td&gt; &lt;td&gt;$0.01 per call&lt;/td&gt; &lt;td&gt;Basic&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic partners&lt;/td&gt; &lt;td&gt;1 million calls per day&lt;/td&gt; &lt;td&gt;$100 per month&lt;/td&gt; &lt;td&gt;Premium&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Although the rate limit is set to &amp;#8220;None&amp;#8221; for internal developers, it is better to set a high rate limit to prevent distributed denial-of-service (DDoS) attacks. Additionally, while the rate limit for strategic partners is expressed per day, it would be better to set it on a per-minute basis. Doing that would prevent overloading systems with heavy loads in short bursts.&lt;/p&gt; &lt;p&gt;Figure 2 shows the API packages from Table 1.&lt;/p&gt; &lt;div id="attachment_743007" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Packaging.png"&gt;&lt;img aria-describedby="caption-attachment-743007" class="hoverZoomLink wp-image-743007 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Packaging-1024x692.png" alt="A visual representation of the API packages from Table 1." width="640" height="433" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Packaging-1024x692.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Packaging-300x203.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Packaging-768x519.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Packaging.png 1286w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-743007" class="wp-caption-text"&gt;Figure 2: API packages for internal developers, external developers, and strategic partners.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The &lt;em&gt;Rate limits&lt;/em&gt; policy, shown in Figure 2, enforces call limits on APIs. Limits are defined for each method, and the same package can enforce different limits for each API method. &lt;em&gt;Pricing rules&lt;/em&gt; are used to enable metering and chargeback for API calls. Pricing rules are defined for each API method, and the same package can enforce different pricing rules for each API method. Finally, the &lt;em&gt;Features&lt;/em&gt; policy lets us define multiple features for each package. 3scale API Management adds metadata tags to each package to uniquely identify and map its available features.&lt;/p&gt; &lt;p&gt;3scale API Management&amp;#8217;s packaging scenario is common, and most API management platforms support something similar. In the following sections, we will look at the different types of plans available from 3scale API Management.&lt;/p&gt; &lt;h2&gt;Application plans&lt;/h2&gt; &lt;p&gt;&lt;em&gt;Application plans&lt;/em&gt; establish the rules (limits, pricing, features) for using an API. Every application request to the API happens within the constraints of an application plan. Every API in 3scale API Management must have at least one defined application plan. It is also common to define multiple plans to target different audiences using the same API. Figure 3 shows the relationship of the API to application plans, consumer audiences, and policies.&lt;/p&gt; &lt;div id="attachment_742997" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Application-Plans.png"&gt;&lt;img aria-describedby="caption-attachment-742997" class="hoverZoomLink wp-image-742997 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Application-Plans-1024x875.png" alt="A single API with three different audiences and their respective application plans and policies." width="640" height="547" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Application-Plans-1024x875.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Application-Plans-300x256.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Application-Plans-768x656.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Application-Plans.png 1220w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742997" class="wp-caption-text"&gt;Figure 3: A single API can have multiple application plans enforcing different policies for different users.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Each consumer application is mapped uniquely to a single application plan. When the application requests an API, 3scale API Management applies the rate limits and pricing rules for that application and updates its usage statistics. Application plans are the lowest granularity of control available in 3scale API Management. Most packaging requirements can be met by using one or more application plans per API.&lt;/p&gt; &lt;h2&gt;Beyond application plans&lt;/h2&gt; &lt;p&gt;In some cases, we need to use specialized plans to define policies for multiple application plans for an API or developer account. A default plan is available to all API providers, but specialized plans—which define complex relationships between services, applications, and accounts—must be explicitly enabled. The decision to use one or more specialized plans should be considered during the API design phase and documented in detail to avoid unexpected outcomes. The next sections introduce service plans and account plans.&lt;/p&gt; &lt;h3&gt;Service plans&lt;/h3&gt; &lt;p&gt;We can use service plans to subscribe consumers to APIs. Service subscriptions are enabled by default in 3scale API Management, and only one service plan is enabled per subscription. A service plan provides service-level features and plans for all applications consuming the service under that plan.&lt;/p&gt; &lt;p&gt;As an example, the plan described in Table 2 adds a new feature to the application plans we developed in the previous section.&lt;/p&gt; &lt;table align="”center”"&gt; &lt;caption&gt;&lt;strong&gt;Table 2: Adding new features to the three basic application plans&lt;/strong&gt;&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Package&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Rate limits&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Pricing rules&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Internal developers&lt;/td&gt; &lt;td&gt;None&lt;/td&gt; &lt;td&gt;Free&lt;/td&gt; &lt;td&gt;Internal, &lt;b&gt;developers&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;External developers&lt;/td&gt; &lt;td&gt;10 calls per minute&lt;/td&gt; &lt;td&gt;$0.01 per call&lt;/td&gt; &lt;td&gt;Basic, &lt;b&gt;developers&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic partners&lt;/td&gt; &lt;td&gt;1 million calls per day&lt;/td&gt; &lt;td&gt;$100 per month&lt;/td&gt; &lt;td&gt;Premium, &lt;b&gt;partners&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;We could set up the new features individually for each application plan. However, it would be better to define the “default” service plan features and enable corresponding features in the application plans as required.&lt;/p&gt; &lt;p&gt;Table 3 describes a more complex scenario, where the API provider needs to provide two or more application plans for partners.&lt;/p&gt; &lt;table align="”center”"&gt; &lt;caption&gt;&lt;strong&gt;Table 3: Multiple application plans&lt;/strong&gt;&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Package&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Rate limits&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Pricing rules&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic Partners Bronze Plan&lt;/td&gt; &lt;td&gt;100,000 calls per day&lt;/td&gt; &lt;td&gt;$30 per month&lt;/td&gt; &lt;td&gt;Premium, partners, bronze, developers&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic Partners Silver Plan&lt;/td&gt; &lt;td&gt;500,000 calls per day&lt;/td&gt; &lt;td&gt;$60 per month&lt;/td&gt; &lt;td&gt;Premium, partners, silver, testing&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic Partners Gold Plan&lt;/td&gt; &lt;td&gt;1 million calls per day&lt;/td&gt; &lt;td&gt;$100 per month&lt;/td&gt; &lt;td&gt;Premium, partners, gold, production&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;In this case, the API provider could allow a single partner account to sign up for multiple plans. For example, a strategic partner could use the bronze plan for applications in development, the silver plan for quality assurance (QA), and the gold plan for production applications. To provide the partner with standard pricing across all application plans, we could use the service plan described in Table 4.&lt;/p&gt; &lt;table align="”center”"&gt; &lt;caption&gt;&lt;strong&gt;Table 4: Introducing a service plan&lt;/strong&gt;&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Service plan&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Set up fees&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Pricing rules&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic Partners Premium Plan&lt;/td&gt; &lt;td&gt;$50&lt;/td&gt; &lt;td&gt;$100 per month&lt;/td&gt; &lt;td&gt;Premium, partners, customers&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Figure 4 shows a typical scenario using service plans and application plans in tandem.&lt;/p&gt; &lt;div id="attachment_742987" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Service-Plans.png"&gt;&lt;img aria-describedby="caption-attachment-742987" class="hoverZoomLink wp-image-742987 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Service-Plans-1024x786.png" alt="A single API with two different service plans: One for developers and one for strategic partners." width="640" height="491" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Service-Plans-1024x786.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Service-Plans-300x230.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Service-Plans-768x589.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Service-Plans.png 1220w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742987" class="wp-caption-text"&gt;Figure 4: Combining service plans and application plans in 3scale API Management.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;To recap, consider using custom service plans for these types of use cases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Custom features that multiple application plans can inherit.&lt;/li&gt; &lt;li&gt;A custom trial period that is applicable across multiple application plans for the same API.&lt;/li&gt; &lt;li&gt;Set up fees or fixed fees that are applicable across multiple application plans for the same API.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Account plans&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Account plans&lt;/em&gt; are used to apply subscription criteria to consumer accounts. Instead of managing API access, like application plans and service plans, this plan packages accounts and applies the account plan across all the APIs accessed by a given account. Account plans create &amp;#8220;tiers&amp;#8221; of usage within the developer portal, allowing you to distinguish between grades of support, content, and other services that partners at different levels receive.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s say that an API provider wants to cater to three different partner levels, with policies for each, as shown in Table 5.&lt;/p&gt; &lt;table align="”center”"&gt; &lt;caption&gt;&lt;strong&gt;Table 5: A sample account plan for three levels of partners&lt;/strong&gt;&lt;/caption&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;Package&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Set up cost&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Monthly cost&lt;/b&gt;&lt;/td&gt; &lt;td&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic Partners Bronze Plan&lt;/td&gt; &lt;td&gt;Free&lt;/td&gt; &lt;td&gt;$30 per month&lt;/td&gt; &lt;td&gt;Premium, partners, bronze, no support&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic Partners Silver Plan&lt;/td&gt; &lt;td&gt;$50&lt;/td&gt; &lt;td&gt;$60 per month&lt;/td&gt; &lt;td&gt;Premium, partners, silver, standard support&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Strategic Partners Gold Plan&lt;/td&gt; &lt;td&gt;$100&lt;/td&gt; &lt;td&gt;$100 per month&lt;/td&gt; &lt;td&gt;Premium, partners, gold, 24/7 support, dedicated account&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The provider chooses to charge a fixed monthly cost and setup cost instead of charging per API or application plan. In this case, it makes sense to have a plan operate at the account level so that the same policies apply to all the APIs and applications associated with that account. The API provider could also create different setup costs and support plans for different sets of customer accounts. Figure 5 illustrates the relationship between account plans and APIs.&lt;/p&gt; &lt;div id="attachment_742977" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Account-Plans.png"&gt;&lt;img aria-describedby="caption-attachment-742977" class="hoverZoomLink wp-image-742977 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Account-Plans-1024x866.png" alt="Internal developers receive a basic plan, while external developers and strategic partners receive a standard trial plan." width="640" height="541" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Account-Plans-1024x866.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Account-Plans-300x254.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Account-Plans-768x649.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/API-Account-Plans.png 1234w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742977" class="wp-caption-text"&gt;Figure 5: Use an account plan to apply the same policies to all APIs and applications associated with an account.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;3scale API Management provides a default account plan for all developer accounts. The default plan ensures that application access is controlled through individual service and application plans. If you needed to define features for a set of developer accounts independent of the number of applications, you might consider implementing an account plan. Account plans also work well when the setup fee, usage fee, or the length of a trial period is fixed for the account regardless of the number of APIs subscribed.&lt;/p&gt; &lt;h2&gt;Watch the video&lt;/h2&gt; &lt;p&gt;Watch the following video for a guide to using 3scale API Management to package and combine API plans for a variety of consumers.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/rs-iRUgN8Ok?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;As you have seen, it is possible to accomplish many complex API packaging scenarios using 3scale API Management and the right combination of account plans, service plans, and application plans. This article discussed strategies for packaging a single API backend endpoint. 3scale API Management also supports an &lt;a href="https://developers.redhat.com/blog/2019/12/03/apis-as-a-product-get-started-in-no-time/"&gt;API-as-a-product&lt;/a&gt; functionality that lets us package multiple backend APIs using the same policies and plans. My next article in this series introduces the API-as-a-product functionality and use cases.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F02%2Fpackaging-apis-for-consumers-with-red-hat-3scale-api-management%2F&amp;#38;linkname=Packaging%20APIs%20for%20consumers%20with%20Red%20Hat%203scale%20API%20Management" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F02%2Fpackaging-apis-for-consumers-with-red-hat-3scale-api-management%2F&amp;#38;linkname=Packaging%20APIs%20for%20consumers%20with%20Red%20Hat%203scale%20API%20Management" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F02%2Fpackaging-apis-for-consumers-with-red-hat-3scale-api-management%2F&amp;#38;linkname=Packaging%20APIs%20for%20consumers%20with%20Red%20Hat%203scale%20API%20Management" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F02%2Fpackaging-apis-for-consumers-with-red-hat-3scale-api-management%2F&amp;#38;linkname=Packaging%20APIs%20for%20consumers%20with%20Red%20Hat%203scale%20API%20Management" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F02%2Fpackaging-apis-for-consumers-with-red-hat-3scale-api-management%2F&amp;#38;linkname=Packaging%20APIs%20for%20consumers%20with%20Red%20Hat%203scale%20API%20Management" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F02%2Fpackaging-apis-for-consumers-with-red-hat-3scale-api-management%2F&amp;#38;linkname=Packaging%20APIs%20for%20consumers%20with%20Red%20Hat%203scale%20API%20Management" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F02%2Fpackaging-apis-for-consumers-with-red-hat-3scale-api-management%2F&amp;#38;linkname=Packaging%20APIs%20for%20consumers%20with%20Red%20Hat%203scale%20API%20Management" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F03%2F02%2Fpackaging-apis-for-consumers-with-red-hat-3scale-api-management%2F&amp;#038;title=Packaging%20APIs%20for%20consumers%20with%20Red%20Hat%203scale%20API%20Management" data-a2a-url="https://developers.redhat.com/blog/2021/03/02/packaging-apis-for-consumers-with-red-hat-3scale-api-management/" data-a2a-title="Packaging APIs for consumers with Red Hat 3scale API Management"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/03/02/packaging-apis-for-consumers-with-red-hat-3scale-api-management/"&gt;Packaging APIs for consumers with Red Hat 3scale API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Y16ej0rYAEA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;One of an API management platform&amp;#8217;s core functionalities is defining and enforcing policies, business domain rate limits, and pricing rules for securing API endpoints. As an API provider, you sometimes need to make the same backend API available for different consumer segments using these terms. In this article, you will learn about using Red Hat [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/03/02/packaging-apis-for-consumers-with-red-hat-3scale-api-management/"&gt;Packaging APIs for consumers with Red Hat 3scale API Management&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/03/02/packaging-apis-for-consumers-with-red-hat-3scale-api-management/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">869597</post-id><dc:creator>Satya Jayanti</dc:creator><dc:date>2021-03-02T08:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/03/02/packaging-apis-for-consumers-with-red-hat-3scale-api-management/</feedburner:origLink></entry><entry><title type="html">New enhancements on DMN editor decision services experience</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4MKIpnOTCag/new-enhancements-on-dmn-editor-decision-services-experience.html" /><author><name>Guilherme Carreiro</name></author><id>https://blog.kie.org/2021/03/new-enhancements-on-dmn-editor-decision-services-experience.html</id><updated>2021-03-01T23:00:00Z</updated><content type="html">The user experience for decision service nodes is something we’re incrementally enhancing in the DMN editor. will introduce a new feature that significantly enhances how users call decision services. Imagine you have a DMN model like this one: Also, imagine that you need to invoke the decision service “user message” into the “Example” node with a Literal Expression. How can you do that? &#x1f914; You probably would need to guess the parameters’ order, which is quite frustrating (of course – we may be wrong!). On Kogito 0.8.4, users will be able to select a decision service and see the order of parameters, like this: So, now it’s much easier to call “user message” now, as we can clearly see the order of our parameters is “Age (number)” and then “Name (string)”. Also, now we know the answer to the question above and we can call our decision service: If you’re wondering what this model returns, check this example of DMN model call and output: require 'httparty' body = { 'Name': 'Kojima', 'Age': 57, } resp = HTTParty.post("http://localhost:8080/example", body: body.to_json, headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, basic_auth: { username: 'kieserver', password: 'kieserver1!' }) puts resp # { # "user message":"function user message( Age, Name )", # "upcase":"THE USER KOJIMA IS 57 YEARS OLD.", # "Example":"THE USER GUILHERME IS 29 YEARS OLD.", # "concat":"The user Kojima is 57 years old.", # "Age":57, # "Name":"Kojima" # } Straightforward, right? &#x1f642; We’ll release Kogito 0.8.4 in a few days with other surprising news… but, if you really wanna try it right now, download my latest VSCode plugin build . Stay tuned! &#x1f642; The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4MKIpnOTCag" height="1" width="1" alt=""/&gt;</content><dc:creator>Guilherme Carreiro</dc:creator><feedburner:origLink>https://blog.kie.org/2021/03/new-enhancements-on-dmn-editor-decision-services-experience.html</feedburner:origLink></entry><entry><title type="html">Business optimisation architecture - Example planning optimisation</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/UvQ57-HczL8/business-optimisation-example-planning-optimisation-architecture.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/O4R26YNWUdk/business-optimisation-example-planning-optimisation-architecture.html</id><updated>2021-03-01T06:00:00Z</updated><content type="html">Part 3 - Example planning optimisation In my previous article from this series I shared the logical view of the business optimisation use case for retail stores. The process was laid out how I've approached the use case and how portfolio solutions are the base for researching a generic architectural blueprint.  It started with laying out the process of how I've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Having completed our discussions on the logical view of the blueprint, it's now time to look at a specific example. This article walks you through an example optimisation scenario showing how expanding the previously discussed elements provides a blueprint for your own optimisation scenarios. BLUEPRINTS REVIEW As mentioned before, the architectural details covered here are base on real solutions using open source technologies. The example scenario presented here is a generic common blueprint that was uncovered researching those solutions. It's my intent to provide a blueprint that provides guidance and not deep technical details. This section covers the visual representations as presented, but it's expected that they'll be evolving based on future research. There are many ways to represent each element in this architectural blueprint, but I've chosen a format that I hope makes it easy to absorb. Feel free to post comments at the bottom of this post, or  with your feedback. Now let's take a look at the details in this blueprint and outline the solution. STORE OPTIMISATION ARCHITECTURE The example blueprint shown in the figure titled Schematic - Business optimisation outlines how optimisation ties into your architecture. In this example, starting from the left we see a business owner and developer providing the input needed for the retail planning services. These inputs are constraints (both hard and soft), resource availability, and business goals to be achieved.  While this might look like something that the business owner and developer are doing into the fully deployed solution, it's really using the previously covered showcased in that blueprint. For simplicity, we've included the planning and constraint development aspects here to help with an understanding that business owners are involved. The planning services would then be triggered by external systems that have been given access through the API management element to start, provide input, or retreive planning optimisation results. It's also possible that the retail planning services are providing input into any number of retail processes.  The retail processes leverage retail decision microservices that contain the centralised store logic for both process and integration microservices are making extensive use of. Integration microservices are also the integration point to all external communications with external systems and retail systems that might be internal to the store organisation but hosted external to the physical location of the business optimisation architecture. Data access is shown at the bottom through the Retail Data Framework, another full architecture blueprint itself with details to be found how it's organised. This access for the retail planning services is arranged by the integration data microservices allowing for clean separation of integration points between critical demarcation lines of your architecture. While the business owner and developer are working on the deployment of the needed retail planning services, at runtime the rest of the elements in this diagram are leveraging these optimisation planning services to achieve desired outcomes.  The diagram might give the impression that this is a single store solution, but it can also be seen in the context of a centralised architecture in the retail organisation where the external systems and triggers are those of satellite stores or warehouses. The stores and warehouses are all looking to make use of the planning and optimising services for better store delivery routing, planning more efficient staff rostering,  and for improving efficiency of local tasks. WHAT'S NEXT THIS WAS JUST A SHORT OVERVIEW OF A PLANNING OPTIMISATION ARCHITECTURE THAT PROVIDES YOU WITH A MAP TO SOLVE YOUR OWN BUSINESS OPTIMISATION CHALLENGES.  AN OVERVIEW OF THIS SERIES ON THE BUSINESS OPTIMISATION PORTFOLIO ARCHITECTURE BLUEPRINT CAN BE FOUND HERE: 1. 2. 3.   4. EXAMPLE VACCINE SCHEDULING CATCH UP ON ANY ARTICLES YOU MISSED BY FOLLOWING ONE OF THE LINKS ABOVE. NEXT IN THIS SERIES, TAKING A LOOK AT AN EXAMPLE FOR VACCINE SCHEDULING USING THIS ARCHITECTURE BLUEPRINT FOR BUSINESS OPTIMISATION. (Article co-authored by , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/UvQ57-HczL8" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/O4R26YNWUdk/business-optimisation-example-planning-optimisation-architecture.html</feedburner:origLink></entry><entry><title type="html">Keycloak 12.0.4 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2SfdeBNr11A/keycloak-1204-released.html" /><author><name /></author><id>https://www.keycloak.org//2021/03/keycloak-1204-released.html</id><updated>2021-03-01T00:00:00Z</updated><content type="html">To download the release go to . ALL RESOLVED ISSUES The full list of resolved issues are available in UPGRADING Before you upgrade remember to backup your database and check the for anything that may have changed.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2SfdeBNr11A" height="1" width="1" alt=""/&gt;</content><dc:creator /><feedburner:origLink>https://www.keycloak.org//2021/03/keycloak-1204-released.html</feedburner:origLink></entry><entry><title>Tips for writing portable assembler with GNU Assembler (GAS)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/oS4nJhJtZ0E/" /><category term="Linux" /><category term="Open source" /><category term="Uncategorized" /><category term="assembly code" /><category term="GAS" /><category term="GNU Assembler" /><category term="portable assembler" /><author><name>Nick Clifton</name></author><id>https://developers.redhat.com/blog/?p=818127</id><updated>2021-02-26T08:00:00Z</updated><published>2021-02-26T08:00:00Z</published><content type="html">&lt;p&gt;Writing assembly code is straightforward when you are familiar with the targeted architecture&amp;#8217;s instruction set, but what if you need to write the code for more than one architecture? For example, you might want to test whether a particular assembler feature is available, or generate an object file for use with another tool. Writing assembly source code that can work on multiple architectures is not so simple.&lt;/p&gt; &lt;p&gt;This article describes common types of problems encountered when working with assembly code, and the techniques to overcome them. You will learn how to address problems with comments, data, symbols, instructions, and sections in assembly code. To get you started, the &lt;a target="_blank" rel="nofollow" href="https://nickc.fedorapeople.org/neutral.s"&gt;Portable assembler demo source file&lt;/a&gt; provides many examples of GNU Assembler (GAS) assembly code. I&amp;#8217;ll use a few of the examples in this article.&lt;/p&gt; &lt;h2&gt;Problems with comments&lt;/h2&gt; &lt;p&gt;There is no architecture-neutral way of creating a prefixed line comment. As a result,&lt;/p&gt; &lt;pre&gt;  # This is a comment &lt;/pre&gt; &lt;p&gt;might or might not work, depending on the target. (On some architectures the hash character is actually part of the instruction set, similarly for the semicolon and colon characters.)&lt;/p&gt; &lt;p&gt;Instead, the safe approach is to use C-like comments:&lt;/p&gt; &lt;pre&gt;  /* This is a comment. */ &lt;/pre&gt; &lt;p&gt;But keep in mind that these comments cannot be nested:&lt;/p&gt; &lt;pre&gt;  /* This is /* not a */ valid comment. */ &lt;/pre&gt; &lt;h2&gt;Problems with data&lt;/h2&gt; &lt;p&gt;The size of individual data items, such as integers, pointers, floats, and so on, varies from one architecture to another. Take the following example:&lt;/p&gt; &lt;pre&gt;  .data   .word 0x12345678 &lt;/pre&gt; &lt;p&gt;This code would fail to assemble on machines where a word was less than 4 bytes long. (Fortunately, the &lt;code&gt;.data&lt;/code&gt; directive is universal.)&lt;/p&gt; &lt;p&gt;A more reliable way to insert specific integer values is to use the &lt;code&gt;.dc.&amp;#60;letter&amp;#62;&lt;/code&gt; directives, where &lt;code&gt;&amp;#60;letter&amp;#62;&lt;/code&gt; is &lt;code&gt;b&lt;/code&gt; for bytes, &lt;code&gt;w&lt;/code&gt; for 16-bit values, and &lt;code&gt;l&lt;/code&gt; for 32-bit values. Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;  .data   .dc.b 0x78   .dc.w 0x5678   .dc.l 0x12345678 &lt;/pre&gt; &lt;p&gt;This assembly code works on all targets, regardless of their word size.&lt;/p&gt; &lt;h3&gt;Inserting 64-bit integer values&lt;/h3&gt; &lt;p&gt;Oddly, the directive for 64-bit values does not follow the same naming scheme. Instead the directive to use is &lt;code&gt;.quad&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;  .quad 0x1234567890abcdef&lt;/pre&gt; &lt;h3&gt;Endian-ness&lt;/h3&gt; &lt;p&gt;All values are stored in the target&amp;#8217;s endian format, which is usually the right approach. However, when fixed ordering is required, specifying multiple single-byte values is the way to go:&lt;/p&gt; &lt;pre&gt;  .data   .dc.b 0x78, 0x56, 0x34, 0x12 &lt;/pre&gt; &lt;p&gt;This code produces a little-endian ordering of bytes, even on a big-endian architecture. You cannot however create multi-byte bit patterns on targets where the byte size is larger than 8 bits (for example, the Texas Instrument&amp;#8217;s TIC54x.) Outside assistance is the only way to handle this particular situation:&lt;/p&gt; &lt;pre&gt;  .data   .ifdef big_bytes   .dc.b 0x5678, 0x1234   .else   .dc.b 0x78, 0x56, 0x34, 0x12   .endif &lt;/pre&gt; &lt;p&gt;This solution works provided the symbol, &lt;code&gt;big_bytes&lt;/code&gt;, is defined for architectures with 16-bit bytes and not otherwise. (Symbols can be defined on the GAS command line with &lt;code&gt;--defsym &amp;#60;name&amp;#62;=&amp;#60;value&amp;#62;&lt;/code&gt;.)&lt;/p&gt; &lt;h3&gt;Alignment requirements&lt;/h3&gt; &lt;p&gt;Another problem with directives that store data values is that they can have alignment requirements. For example:&lt;/p&gt; &lt;pre&gt;  .data   .dc.b 0xff   .dc.l 0x12345678 &lt;/pre&gt; &lt;p&gt;This example fails to assemble for the SH target because the 4 bytes in &lt;code&gt;0x12345678&lt;/code&gt; are not being stored on a 4-byte aligned boundary. You can solve this issue with an alignment directive, but be cautious of using &lt;code&gt;.align&lt;/code&gt;, which has target-specific semantics. Instead, use either the &lt;code&gt;.balign&lt;/code&gt; or &lt;code&gt;.p2align&lt;/code&gt; directives:&lt;/p&gt; &lt;pre&gt;.data   .dc.b 0xff   .balign 4   .dc.l 0x12345678 &lt;/pre&gt; &lt;p&gt;Note that this code introduces a gap between the &lt;code&gt;0xff&lt;/code&gt; byte and the &lt;code&gt;0x12345678&lt;/code&gt; word.&lt;/p&gt; &lt;h3&gt;Fixed values&lt;/h3&gt; &lt;p&gt;GAS supports simple arithmetic and logical operations on symbols and constants. For most directives, the result must be a fixed value. Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;  .dc.b (val &amp;#38; 0xff), (val &amp;#62;&amp;#62; 8) &amp;#38; 0xff &lt;/pre&gt; &lt;p&gt;This code works provided that the symbol &lt;code&gt;val&lt;/code&gt; has a defined value when the directive is evaluated.&lt;/p&gt; &lt;h3&gt;Storing strings&lt;/h3&gt; &lt;p&gt;Strings can be stored easily, but beware that the &lt;code&gt;.ascii&lt;/code&gt; directive does not store a terminating NUL byte. For C like strings use the &lt;code&gt;.asciz &lt;/code&gt;directive instead:&lt;/p&gt; &lt;pre&gt;  .ascii "this string has no NUL byte at the end"   .asciz "this string does" &lt;/pre&gt; &lt;h2&gt;Problems with symbols&lt;/h2&gt; &lt;p&gt;Labels and symbols are defined in various ways, all of which work across most targets:&lt;/p&gt; &lt;pre&gt;  val = 0x1234   .equiv here, .   .equiv there, here + 4   this_is_a_label: &lt;/pre&gt; &lt;p&gt;For comparability with the HPPA assembler however, it is necessary to start a label&amp;#8217;s name in the first column of a line. Plus, by extension, the first column on any line needs to contain a whitespace character if no label is being defined.&lt;/p&gt; &lt;p&gt;If a symbol or label holds an address, then it is safest to insert it into the code using the &lt;code&gt;.dc.a&lt;/code&gt; directive, like so:&lt;/p&gt; &lt;pre&gt; .dc.a this_is_a_label &lt;/pre&gt; &lt;p&gt;You can perform simple addition or subtraction operations on an address, but more complicated operations are often not supported. Calculating the difference between two labels usually works only when they are defined in the same section, and sometimes not even then:&lt;/p&gt; &lt;pre&gt; .dc.a label1 - 2 /* This will work. */   .dc.a label1 - label2 /* This might not work. */ &lt;/pre&gt; &lt;h2&gt;Problems with instructions&lt;/h2&gt; &lt;p&gt;Typically, instructions are specific to individual architectures. As a result, you cannot write a generic assembler source file that involves code. Starting with GAS 2.35 however, there is a new pseudo-op instruction (&lt;code&gt;.nop&lt;/code&gt;), which generates a no-op instruction on any target:&lt;/p&gt; &lt;pre&gt;  .text   .nop /* This is a real instruction. */ &lt;/pre&gt; &lt;h2&gt;Problems with sections&lt;/h2&gt; &lt;p&gt;All architectures accept the section names &lt;code&gt;.text&lt;/code&gt;, &lt;code&gt;.data&lt;/code&gt;, and &lt;code&gt;.bss&lt;/code&gt;. The old AOUT file format only supports these names. More modern formats such as Portable Executable (PE) and Executable and Linkable Format (ELF) support arbitrary section names. When defining new sections, be aware that the &lt;code&gt;.section&lt;/code&gt; directive for ELF targets accepts more arguments than does the PE version:&lt;/p&gt; &lt;pre&gt; .section name   /* See note 1. */   .section name, "flags"   /* See note 2. */   .section name, "flags", %type  /* See note 3. */ &lt;/pre&gt; &lt;p&gt;Notes:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;This form fails on targets where the section flags are compulsory.&lt;/li&gt; &lt;li&gt;This form works for both PE-based and ELF-based targets, although the flags are different.&lt;/li&gt; &lt;li&gt;This form only works on ELF-based targets. Note the use of the &lt;em&gt;%&lt;/em&gt; character instead of the &lt;em&gt;@&lt;/em&gt; character.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article addressed common problems writing portable assembly code and provided solutions and examples. In summary, writing portable assembler is hard to do and best kept simple, and persistence is the key.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#038;title=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" data-a2a-url="https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/" data-a2a-title="Tips for writing portable assembler with GNU Assembler (GAS)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/"&gt;Tips for writing portable assembler with GNU Assembler (GAS)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/oS4nJhJtZ0E" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Writing assembly code is straightforward when you are familiar with the targeted architecture&amp;#8217;s instruction set, but what if you need to write the code for more than one architecture? For example, you might want to test whether a particular assembler feature is available, or generate an object file for use with another tool. Writing assembly [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/"&gt;Tips for writing portable assembler with GNU Assembler (GAS)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">818127</post-id><dc:creator>Nick Clifton</dc:creator><dc:date>2021-02-26T08:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/</feedburner:origLink></entry><entry><title type="html">Eclipse Vert.x 3.9.6 released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/575XFa7CT_E/eclipse-vert-x-3-9-6" /><author><name>Julien Viet</name></author><id>https://vertx.io/blog/eclipse-vert-x-3-9-6</id><updated>2021-02-26T00:00:00Z</updated><content type="html">Eclipse Vert.x version 3.9.6 has just been released. It fixes quite a few bugs that have been reported by the community.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/575XFa7CT_E" height="1" width="1" alt=""/&gt;</content><dc:creator>Julien Viet</dc:creator><feedburner:origLink>https://vertx.io/blog/eclipse-vert-x-3-9-6</feedburner:origLink></entry><entry><title type="html">Migrating jBPM images secured by LDAP to Elytron</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sTStztYN0xY/migrating-jbpm-images-secured-by-ldap-to-elytron.html" /><author><name>Gonzalo Muñoz Fernández</name></author><id>https://blog.kie.org/2021/02/migrating-jbpm-images-secured-by-ldap-to-elytron.html</id><updated>2021-02-25T18:40:01Z</updated><content type="html">“It’s like having wings, like flying sometimes because you go off into another realm” (Paul Rodgers) is the new security framework offered by JBoss EAP/Wildfly, which tries to unify security management and application access in a single subsystem.  Legacy security subsystem has been deprecated and maybe removed or limited in future versions of JBoss EAP/Wildfly, while now it’s shipping Elytron as its replacement. In this post, we cover how to migrate current jBPM images for and (includes also Business-Central) from legacy (with security subsystem based on JAAS login modules) to Elytron. The new images should incorporate the configuration for LDAP authentication and authorization instead of the default one which is properties-based.  For each image, we are going to follow a different strategy: * Partial migration: maintains the legacy login modules at the security subsystem but exposes them to Elytron.  * Full migration: Login modules are completely replaced by Security Domain at Elytron. All the code and configuration for these examples can be found . ENVIRONMENT SETUP Our test class (with scenarios for testing authentication and process variable change authorization in jbpm) will make use of testcontainers: * populated with ldif (LDAP Data Interchange Format) containing fixture; * KIE Server plus a business application, that will be built on-the-fly, with a multi-stage strategy in the dockerfile: * First, maven installs the kjar (other option would have been to fetch it from GitHub); * Then, the jboss-cli scripts tune standalone configuration including LDAP support and Elytron; In this setup, both containers will share the same network and will communicate with each other using the network-alias. INFO: The business application used in the test is the same described in the following post, but it’s now using Wildfly: . LDAP STRUCTURE  For this example, we will use image as the LDAP backend. We set up  the following users and roles structure within it: We will start the openLDAP container with following environment variables: withEnv("LDAP_DOMAIN","jbpm.org"); withEnv("LDAP_ADMIN_PASSWORD","admin"); //default On the side jBPM, we need to define two files for LDAP authentication and role mapping: * jbpm.user.info.properties: ldap.user.ctx=ou\=People,dc\=jbpm,dc\=org ldap.role.ctx=ou\=Roles,dc\=jbpm,dc\=org ldap.user.filter=(uid\={0}) ldap.role.filter=(cn\={0}) * jbpm.usergroup.callback.properties: ldap.user.ctx=ou\=People,dc\=jbpm,dc\=org ldap.role.ctx=ou\=Roles,dc\=jbpm,dc\=org ldap.user.roles.ctx=ou\=Roles,dc\=jbpm,dc\=org ldap.user.filter=(uid\={0}) ldap.role.filter=(cn\={0}) ldap.user.roles.filter=(member\={0}) ldap.bind.user=cn\=admin,dc\=jbpm,dc\=org ldap.bind.pwd=admin java.naming.provider.url=ldap://ldap-alias:389 TIP: Notice that if the LDAP server doesn’t allow anonymous binding (as in the current image), then ldap.bind.user and ldap.bind.pwd parameters are mandatory in this file. PARTIAL MIGRATION In this case, we are going to use image as it uses KieLoginModule for business-central.war and jbpm-casemgmt.war deployments. The is in charge of keeping BASIC Authorization header as a principal for the upcoming REST API invocations from these clients. So, the idea is to add a new legacy login module for LDAP auth, belonging to WildFly’s security subsystem, and then expose this domain as an Elytron security realm so that it can be part of the Elytron subsystem. We’ll do these actions by using the jboss-cli script:   TIP: jboss-cli is a script available by default in WildFly’s bin directory. You can find it in .sh and .bat files, so you can run on Unix based OS and Windows respectively. 1.- Let’s define a LdapExtLoginModule that matches our LDAP configuration: /subsystem=security/security-domain=other/authentication=classic/login-module=LdapExtended:add(code="org.jboss.security.auth.spi.LdapExtLoginModule", flag=required, module-options=[ \ ("searchScope" =&gt; "SUBTREE_SCOPE"), \ ("java.naming.factory.initial" =&gt; "com.sun.jndi.ldap.LdapCtxFactory"), \ ("java.naming.provider.url" =&gt; "ldap://ldap-alias:389"), \ ("roleAttributeIsDN" =&gt; "true"), \ ("rolesCtxDN" =&gt; "ou=Roles,dc=jbpm,dc=org"), \ ("roleFilter" =&gt; "(member=uid={0},ou=People,dc=jbpm,dc=org)"), \ ("roleNameAttributeID" =&gt; "cn"), \ ("searchTimeLimit" =&gt; "5000"), \ ("java.naming.security.authentication" =&gt; "simple"), \ ("roleRecursion" =&gt; "0"), \ ("java.naming.referral" =&gt; "follow"), \ ("bindDN" =&gt; "cn=admin,dc=jbpm,dc=org"), \ ("bindCredential" =&gt; "admin"), \ ("baseCtxDN" =&gt; "ou=People,dc=jbpm,dc=org"), \ ("allowEmptyPasswords" =&gt; "false"), \ ("throwValidateError" =&gt; "true"), \ ("baseFilter" =&gt; "(uid={0})")]) Notice that the security-domain has to be called other because it is the same name protected by the KIE application security domain, as you can see inthe images, in the file . This name is the same as preconfigured security domain for other login modules, so it’s better to remove these legacy ones: /subsystem=security/security-domain=other/authentication=classic/login-module=UsersRoles:remove /subsystem=security/security-domain=other/authentication=classic/login-module=Remoting:remove /subsystem=security/security-domain=other/authentication=classic/login-module=RealmDirect:remove 2.- Next, we will link legacy security domain (other) with a new elytron-realm, that we are going to call LegacyRealm: /subsystem=security/elytron-realm=LegacyRealm:add(legacy-jaas-config=other) This way we are creating a dependency from the legacy security subsystem into the elytron subsystem. 3.- This LegacyRealm will be part of the new elytron security domain we are going to name as KIEDomain: /subsystem=elytron/security-domain=KIEDomain:add(realms=[{realm=LegacyRealm}], default-realm=LegacyRealm, permission-mapper=default-permission-mapper) TIP: In this case, there is no need for a simple-role-decoder to associate roles, as these ones are retrieved by legacy login modules. 4.- Configure an http-authentication-factory (here called ldap-http-auth) for the KIEDomain and add BASIC (linked to LegacyRealm) and FORM authentication mechanisms used by KIE application to it. /subsystem=elytron/http-authentication-factory=ldap-http-auth:add(http-server-mechanism-factory=global,security-domain=KIEDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=LegacyRealm}]}, {mechanism-name=FORM}]) 5.- Next, add it to undertow subsystem: /subsystem=undertow/application-security-domain=KIEDomain:add(http-authentication-factory=ldap-http-auth) /subsystem=undertow:write-attribute(name=default-security-domain, value=KIEDomain) It’s time to check that everything worked fine: at runtime, from jboss-cli, read the protected deployments (remember that other is the name for the security-domain in the jboss-web.xml of these wars): /subsystem=undertow/application-security-domain=other:read-resource(include-runtime=true) { "outcome" =&gt; "success", "result" =&gt; { "enable-jacc" =&gt; false, "enable-jaspi" =&gt; true, "http-authentication-factory" =&gt; "ldap-http-auth", "integrated-jaspi" =&gt; true, "override-deployment-config" =&gt; false, "referencing-deployments" =&gt; [ "jbpm-casemgmt.war", "business-central.war", "kie-server.war" ], "security-domain" =&gt; undefined, "setting" =&gt; undefined } } For the authorization scenarios, the authenticated subject should contain the principals represented on the image below. These are populated by LoginModules, and will be used by JACC mechanism to obtain the roles for the IdentityProvider: FULL MIGRATION In the case of image, only the kie-server.war is present (no KieLoginModule dependencies) and therefore, it’s possible to make a full migration to Elytron. Elytron is based on a security-domain concept,  in other words, on the representation of a security policy. It is backed by security-realm/s, and resources to make transformations (role-decoder, permission-mapper and others). In this practical example, we are going to use Elytron LDAP Security Realm to access LDAP backend and verify credentials as well as obtain attributes associated with an identity. More complex scenarios would allow having several security realms, and by means of a security-mapper, determine which attributes would be retrieved from each security realm. 1.- First, let’s remove the security-domain called other at legacy security subsystem, as it will be no longer used: /subsystem=security/security-domain=other:remove 2.- Let’s add elytron subsystem from scratch (if not present): /extension=org.wildfly.extension.elytron:add /subsystem=elytron:add 3.- Define the directory context to connect with LDAP and the LDAP Realm into Elytron: /subsystem=elytron/dir-context=ldap-connection:add(url=ldap://ldap-alias:389, principal="cn=admin,dc=jbpm,dc=org", credential-reference={clear-text=admin}) /subsystem=elytron/ldap-realm="KieLdap":add(dir-context=ldap-connection, \ direct-verification=true, \ identity-mapping={search-base-dn="ou=People,dc=jbpm,dc=org", \ rdn-identifier="uid", \ attribute-mapping=[{filter-base-dn="ou=Roles,dc=jbpm,dc=org",filter="(member=uid={0},ou=People,dc=jbpm,dc=org)",from="cn",to="Roles"}]}) Notice that the LDAP connection needs the principal (bindDN) and its password as the used LDAP server doesn’t allow anonymous binding. Retrieved roles are mapped from “cn” to “Roles”, where the RoleDecoder will take them. This RoleDecoder component (as its name indicates) is in charge of decoding user’s roles. Our simple-role-decoder (from-roles-attribute) is pretty straightforward: roles are obtained directly from the attribute “Roles”. &lt;simple-role-decoder name="from-roles-attribute" attribute="Roles"/&gt; 4.- Create the security domain in Elytron, named KIEDomain, (any name is valid, as we will map it later to the one defined at application level) and add it the previous LDAP realm, and the default-permission-mapper: /subsystem=elytron/security-domain=KIEDomain:add(realms=[{realm=KieLdap,role-decoder=from-roles-attribute}], default-realm="KieLdap", permission-mapper=default-permission-mapper) TIP: The default-permission-mapper gives “login permission” to all users but the one with anonymous principal, excluded for login. This means that it doesn’t matter if the verification with the backend LDAP is successful (and valid roles), login action won’t be allowed. &lt;permission-mapping&gt; &lt;principal name="anonymous"/&gt; &lt;!-- No permissions: Deny any permission to anonymous! --&gt; &lt;/permission-mapping&gt; It will produce following logs: Identity [anonymous] attributes are: Attribute [Roles] value [user]. Authorizing principal anonymous. Authorizing against the following attributes: [Roles] =&gt; [user] Permission mapping: identity [anonymous] with roles [user] implies ("org.wildfly.security.auth.permission.LoginPermission" "") = false Authorization failed - identity does not have required LoginPermission 5.- Next, we need to define the HTTP authentication factory: for kie-server, it’s needed to link the mechanisms for BASIC and FORM authentications: /subsystem=elytron/http-authentication-factory=ldap-http-auth:add(http-server-mechanism-factory=global,security-domain=KIEDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=KieLdap}]}, {mechanism-name=FORM}]) 6.- Map the application security domain (other, as it is the one specified at jboss-web.xml) to our Elytron security domain (KIEDomain) for the undertow and ejb3 subsystems: /subsystem=undertow/application-security-domain=other:add(security-domain=KIEDomain) /subsystem=ejb3/application-security-domain=other:add(security-domain=KIEDomain) 7.- Update the messaging-activemq (JMS) to point to our Elytron security domain (KIEDomain) and undefine (remove) the default security domain given by WildFly: /subsystem=messaging-activemq/server=default:write-attribute(name=elytron-domain, value=KIEDomain) /subsystem=messaging-activemq/server=default:undefine-attribute(name=security-domain) 8.- Disable JACC from legacy security subsystem and enable it at elytron by adding the default policy: /subsystem=security:write-attribute(name=initialize-jacc, value=false) /subsystem=elytron/policy=jacc:add(jacc-policy={}) That’s all. Now, let’s see how it works: After a request to the KIE server is filtered and assigned to HTTP mechanism, it’s assigned to the KieLdap Realm. Once a user has been authenticated against LDAP retrieving its roles, the security domain produces a security identity as you can see on the logs below: Obtaining authorization identity attributes for principal [Bartlet]: Identity [Bartlet] attributes are: Attribute [Roles] value [President]. Attribute [Roles] value [kie-server]. These roles will be retrieved by JACC IdentityProvider to authorize actions inside KIE server. CONCLUSION Legacy security subsystem has been deprecated from EAP/Wildfly, and in the future, it will be totally removed. Then, Elytron will become the one and unified subsystem for authentication and authorization. For easing the transition, a partial migration is offered to link both subsystems, but the full migration is preferred. KIE server is ready to migrate with a few jboss-cli operations. Give it a try, really worth it! Featured photo by Martin Cimbalek The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sTStztYN0xY" height="1" width="1" alt=""/&gt;</content><dc:creator>Gonzalo Muñoz Fernández</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/migrating-jbpm-images-secured-by-ldap-to-elytron.html</feedburner:origLink></entry><entry><title type="html">VU Alumni Spotlight - Open Key to Every Career (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FS3wLbsAxfU/vu-alumni-spotlight-open-key-to-every-career.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/GAVXuHfmkKs/vu-alumni-spotlight-open-key-to-every-career.html</id><updated>2021-02-25T15:00:00Z</updated><content type="html"> As previously mentioned, I was invited to speak today as part of the VU alumni spotlight series.  I spent the time sharing how being open can mean everything to your career. It's something that has been core to my journey throughout my working life and striving to help others only lifts your own path. It's amazing to see how many people just need to slightly adjust their way of doing things to become that catalyst in another person's journey through life. If you were unable to join, or just didn't have the time, no worries, I've posted the slides from the session online below. The following was shared online in a virtual event with anyone wanting to attend, first the abstract and then the slides themselves. OPEN IS KEY TO EVERY CAREER  It's not a coincidence. It's not just luck. It's not going to happen by itself, so what's the secret sauce for accelerating your career path? Understanding what makes a career grow, what choices are crucial, and what actions accelerate or damage your future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in an open source world is what this session provides. Be ready for your next career step using open source principles. Join me for a story sharing a clear and easy to use plan for jump starting your career immediately. Hope you enjoyed this session and feel free to reach out in the comments or contact me through this site.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FS3wLbsAxfU" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/GAVXuHfmkKs/vu-alumni-spotlight-open-key-to-every-career.html</feedburner:origLink></entry></feed>
